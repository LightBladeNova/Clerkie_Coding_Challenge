"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _parsers = require("./parsers");

var _parsers2 = _interopRequireDefault(_parsers);

var _parsePaths = require("./parsePaths");

var _parsePaths2 = _interopRequireDefault(_parsePaths);

var _removeUndefined = require("./removeUndefined");

var _removeUndefined2 = _interopRequireDefault(_removeUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Applies `operator` parser to the schema. Also translates fields to paths.
 * @example
 * const schema = require('schm')
 * const { query } = require('schm-mongo')
 *
 * const querySchema = schema({
 *   name: String,
 *   age: Number,
 * }, query())
 *
 * const parsed = querySchema.parse({ name: 'Haz', age: 27 })
 * // {
 * //   name: 'Haz',
 * //   age: 27,
 * // }
 * db.collection.find(parsed)
 * @example
 * const schema = require('schm')
 * const { query } = require('schm-mongo')
 *
 * const querySchema = schema({
 *   term: RegExp,
 *   after: { type: Date, operator: '$gte' },
 *   before: { type: Date, operator: '$lte' },
 * }, query({
 *   term: ['title', 'description'],
 *   after: 'date',
 *   before: 'date',
 * }))
 *
 * const parsed = querySchema.parse({
 *   term: 'foo',
 *   after: '2018-01-01',
 *   before: '2018-03-03',
 * })
 * // {
 * //   $and: [
 * //     { $or: [{ title: /foo/i }, { description: /foo/i }] },
 * //     { date: { $gte: 1514764800000 } },
 * //     { date: { $lte: 1520035200000 } },
 * //   ],
 * // }
 * db.collection.find(parsed)
 */
var query = function query() {
  var pathsMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (previous) {
    return previous.merge({
      parsers: _parsers2.default,
      parse: function parse(values) {
        var parsed = previous.parse.call(this, values);
        return (0, _parsePaths2.default)((0, _removeUndefined2.default)(parsed), pathsMap);
      }
    });
  };
};

exports.default = query;