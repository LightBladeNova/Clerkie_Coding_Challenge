"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _merge = require("lodash/merge");

var _merge2 = _interopRequireDefault(_merge);

var _removeUndefined = require("./removeUndefined");

var _removeUndefined2 = _interopRequireDefault(_removeUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Creates a [geospatial query](https://docs.mongodb.com/manual/geospatial-queries/) based on values.
 * @example
 * const schema = require('schm')
 * const { near } = require('schm-mongo')
 *
 * const nearSchema = schema(near('location'))
 *
 * const parsed = nearSchema.parse({
 *   near: '-20.4321,44.4321',
 *   min_distance: 1000,
 *   max_distance: 2000,
 * })
 * // {
 * //   location: {
 * //     $near: {
 * //       $geometry: {
 * //         type: 'Point',
 * //         coordinates: [-20.4321, 44.4321],
 * //       },
 * //       $minDistance: 1000,
 * //       $maxDistance: 2000,
 * //     },
 * //   }
 * // }
 * @example
 * // renaming near parameters
 * const schema = require('schm')
 * const translate = require('schm-translate')
 * const { near } = require('schm-mongo')
 *
 * const nearSchema = schema(
 *   near('location'),
 *   translate({ near: 'lnglat', min_distance: 'min', max_distance: 'max' })
 * )
 *
 * const parsed = nearSchema.parse({
 *   lnglat: '-20.4321,44.4321',
 *   min: 1000,
 *   max: 2000,
 * })
 * // {
 * //   location: {
 * //     $near: {
 * //       $geometry: {
 * //         type: 'Point',
 * //         coordinates: [-20.4321, 44.4321],
 * //       },
 * //       $minDistance: 1000,
 * //       $maxDistance: 2000,
 * //     },
 * //   }
 * // }
 */
var near = function near(param) {
  return function (previous) {
    var params = {
      near: {
        type: String,
        set: function set(value) {
          if (!value) return value;
          return value.split(",").map(function (v) {
            return +v.trim();
          });
        }
      },
      min_distance: Number,
      max_distance: Number
    };
    return previous.merge({
      params: (0, _merge2.default)({}, params, previous.params),
      parse: function parse(values) {
        var _previous$parse$call = previous.parse.call(this, values),
            coordinates = _previous$parse$call.near,
            $minDistance = _previous$parse$call.min_distance,
            $maxDistance = _previous$parse$call.max_distance,
            parsed = _objectWithoutProperties(_previous$parse$call, ["near", "min_distance", "max_distance"]);

        if (coordinates) {
          return _extends({}, parsed, _defineProperty({}, param, {
            $near: (0, _removeUndefined2.default)({
              $geometry: {
                type: "Point",
                coordinates: coordinates
              },
              $minDistance: $minDistance,
              $maxDistance: $maxDistance
            })
          }));
        }
        return parsed;
      }
    });
  };
};

exports.default = near;