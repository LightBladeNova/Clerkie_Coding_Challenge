"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Defines a `fields` parameter and parses it into [MongoDB projection](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/).
 * @example
 * const schema = require('schm')
 * const { fields } = require('schm-mongo')
 *
 * const fieldsSchema = schema(fields())
 * const parsed = fieldsSchema.parse({ fields: ['-_id', 'name'] })
 * // {
 * //   fields: {
 * //     _id: 0,
 * //     name: 1,
 * //   }
 * // }
 * db.collection.find({}, parsed.fields)
 * @example
 * // Configuring fields parameter
 * const schema = require('schm')
 * const { fields } = require('schm-mongo')
 *
 * const fieldsSchema = schema({
 *   fields: {
 *     type: String,
 *     validate: [value => value._id !== 0, 'Cannot hide _id'],
 *   },
 * }, fields())
 *
 * fieldsSchema.validate({ fields: ['-_id'] }) // error
 * @example
 * // Renaming fields
 * const schema = require('schm')
 * const translate = require('schm-translate')
 * const { fields } = require('schm-mongo')
 *
 * const fieldsSchema = schema(
 *   fields(),
 *   translate({ fields: 'select' })
 * )
 *
 * const parsed = fieldsSchema.parse({ select: ['-_id', 'name'] })
 * // {
 * //   fields: {
 * //     _id: 0,
 * //     name: 1,
 * //   }
 * // }
 * db.collection.find({}, parsed.fields)
 */
var fields = function fields() {
  return function (previous) {
    return previous.merge({
      params: {
        fields: {
          type: String,
          set: function set(value) {
            if (!value) return value;
            return value.split(",").map(function (v) {
              return v.trim();
            }).map(function (v) {
              return _defineProperty({}, v.replace(/^[+-]/, ""), v.indexOf("-") === 0 ? 0 : 1);
            }).reduce(function (finalObject, currentObject) {
              return _extends({}, finalObject, currentObject);
            });
          }
        }
      }
    });
  };
};
exports.default = fields;