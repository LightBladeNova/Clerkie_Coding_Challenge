"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _merge = require("lodash/merge");

var _merge2 = _interopRequireDefault(_merge);

var _removeUndefined = require("./removeUndefined");

var _removeUndefined2 = _interopRequireDefault(_removeUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Pagination: parses `page`, `limit` and `sort` parameters into properties to be used within [MongoDB cursor methods](https://docs.mongodb.com/manual/reference/method/js-cursor).
 * @example
 * const schema = require('schm')
 * const { page } = require('schm-mongo')
 *
 * const pageSchema = schema(page())
 * const parsed = pageSchema.parse({ page: 3, limit: 30, sort: 'createdAt' })
 * // {
 * //   page: {
 * //     limit: 30,
 * //     skip: 60,
 * //     sort: { createdAt: 1 },
 * //   }
 * // }
 * @example
 * // Renaming page parameters
 * const schema = require('schm')
 * const translate = require('schm-translate')
 * const { page } = require('schm-mongo')
 *
 * const pageSchema = schema(
 *   page(),
 *   translate({ page: 'p', limit: 'size', sort: 'sort_by' })
 * )
 * const parsed = pageSchema.parse({ p: 3, size: 30, sort_by: 'createdAt' })
 * // {
 * //   page: {
 * //     limit: 30,
 * //     skip: 60,
 * //     sort: { createdAt: 1 },
 * //   }
 * // }
 */
var page = function page() {
  return function (previous) {
    var params = {
      page: 1,
      limit: 20,
      sort: {
        type: String,
        set: function set(value) {
          if (!value) return value;
          return value.split(",").map(function (v) {
            return v.trim();
          }).map(function (v) {
            return _defineProperty({}, v.replace(/^[+-]/, ""), v.indexOf("-") === 0 ? -1 : 1);
          }).reduce(function (finalObject, currentObject) {
            return _extends({}, finalObject, currentObject);
          });
        }
      }
    };

    return previous.merge({
      params: (0, _merge2.default)({}, params, previous.params),
      parse: function parse(values) {
        var _previous$parse$call = previous.parse.call(this, values),
            pageNumber = _previous$parse$call.page,
            limit = _previous$parse$call.limit,
            sort = _previous$parse$call.sort,
            parsed = _objectWithoutProperties(_previous$parse$call, ["page", "limit", "sort"]);

        var skip = (pageNumber - 1) * limit;
        return _extends({}, parsed, {
          page: (0, _removeUndefined2.default)({
            skip: skip,
            limit: limit,
            sort: sort
          })
        });
      }
    });
  };
};
exports.default = page;